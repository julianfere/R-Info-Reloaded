import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */


/* Optional JavaScript section to include parser actions, etc. */

export class RinfoParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"programa":3,"PROGRAMA":4,"ID":5,"secciones":6,"seccion":7,"AREAS":8,"area_defs":9,"ROBOTS":10,"robot_defs":11,"VARIABLES":12,"var_defs":13,"COMENZAR":14,"acciones":15,"FINPROGRAMA":16,"EOF":17,"area_def":18,"COLON":19,"area_tipo":20,"LPAREN":21,"NUMBER":22,"COMMA":23,"RPAREN":24,"AREAC":25,"AREAP":26,"AREAPC":27,"robot_def":28,"ROBOT":29,"var_section":30,"FIN":31,"var_def":32,"tipo_var":33,"TIPO_VAR_NUMERO":34,"BOOLEAN":35,"accion":36,"tipo_parametro":37,"PARAMETRO_ENTRADA":38,"PARAMETRO_ENTRADA_SALIDA":39,"parametro":40,"parametros":41,"argumento":42,"argumentos":43,"proceso":44,"PROCESO":45,"firma":46,"REPETIR":47,"FINREPETIR":48,"si":49,"condicion":50,"finsi":51,"Iniciar":52,"ASSIGN":53,"matematica":54,"algebra_booleana":55,"==":56,"!=":57,"<":58,">":59,"+":60,"-":61,"*":62,"/":63,"AND":64,"OR":65,"NOT":66,"V":67,"F":68,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",4:"PROGRAMA",5:"ID",8:"AREAS",10:"ROBOTS",12:"VARIABLES",14:"COMENZAR",16:"FINPROGRAMA",17:"EOF",19:"COLON",21:"LPAREN",22:"NUMBER",23:"COMMA",24:"RPAREN",25:"AREAC",26:"AREAP",27:"AREAPC",29:"ROBOT",31:"FIN",34:"TIPO_VAR_NUMERO",35:"BOOLEAN",38:"PARAMETRO_ENTRADA",39:"PARAMETRO_ENTRADA_SALIDA",45:"PROCESO",47:"REPETIR",48:"FINREPETIR",49:"si",51:"finsi",52:"Iniciar",53:"ASSIGN",56:"==",57:"!=",58:"<",59:">",60:"+",61:"-",62:"*",63:"/",64:"AND",65:"OR",66:"NOT",67:"V",68:"F"};
    productions_: ProductionsType = [0,[3,3],[6,1],[6,2],[7,2],[7,2],[7,2],[7,4],[9,1],[9,2],[18,12],[20,1],[20,1],[20,1],[11,1],[11,2],[28,6],[30,2],[30,0],[13,1],[13,2],[32,3],[33,1],[33,1],[33,1],[15,1],[15,2],[37,1],[37,1],[40,4],[41,1],[41,3],[42,1],[42,1],[42,1],[43,1],[43,3],[44,6],[44,7],[46,3],[46,4],[36,4],[36,6],[36,8],[36,3],[36,3],[36,1],[50,3],[50,3],[50,3],[50,3],[50,1],[54,3],[54,3],[54,3],[54,3],[54,1],[54,1],[55,3],[55,3],[55,2],[55,1],[55,1]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {41:[2,11],42:[2,12],43:[2,13],54:[2,51],91:[2,47],92:[2,48],93:[2,49],94:[2,50]};

    constructor (yy = {}, lexer = new RinfoLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,6],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[1,8,10,12,14],$V5=[1,13],$V6=[1,16],$V7=[1,19],$V8=[1,25],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,5,8,10,12,14],$Vd=[1,8,10,12,14,29],$Ve=[5,16,31,47,48,49,51,52],$Vf=[1,39],$Vg=[1,58],$Vh=[1,59],$Vi=[1,60],$Vj=[1,61],$Vk=[1,62],$Vl=[1,68],$Vm=[1,66],$Vn=[1,67],$Vo=[1,79],$Vp=[1,80],$Vq=[1,81],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[5,16,31,47,48,49,51,52,60,61,62,63],$Vv=[5,16,31,47,48,49,51,52,64,65],$Vw=[5,16,24,31,47,48,49,51,52],$Vx=[1,87],$Vy=[23,24];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:4,7:5,8:$V0,10:$V1,12:$V2,14:$V3},{1:[2,1],7:10,8:$V0,10:$V1,12:$V2,14:$V3},o($V4,[2,2]),{5:$V5,9:11,18:12},{11:14,28:15,29:$V6},{5:$V7,13:17,32:18},{5:$V8,15:20,36:21,46:26,47:$V9,49:$Va,52:$Vb},o($V4,[2,3]),o($V4,[2,4],{18:27,5:$V5}),o($Vc,[2,8]),{19:[1,28]},o($V4,[2,5],{28:29,29:$V6}),o($Vd,[2,14]),{5:[1,30]},o($V4,[2,6],{32:31,5:$V7}),o($Vc,[2,19]),{19:[1,32]},{5:$V8,16:[1,33],36:34,46:26,47:$V9,49:$Va,52:$Vb},o($Ve,[2,25]),{22:[1,35]},{21:[1,36]},{21:[1,37]},{21:$Vf,53:[1,38]},o($Ve,[2,46]),o($Vc,[2,9]),{20:40,25:[1,41],26:[1,42],27:[1,43]},o($Vd,[2,15]),{12:[1,45],14:[2,18],30:44},o($Vc,[2,20]),{5:[1,49],33:46,34:[1,47],35:[1,48]},{17:[1,50]},o($Ve,[2,26]),{5:$V8,15:51,36:21,46:26,47:$V9,49:$Va,52:$Vb},{5:[1,53],46:54,50:52},{5:[1,55]},{5:$Vg,22:$Vh,54:56,55:57,66:$Vi,67:$Vj,68:$Vk},{5:$Vl,22:$Vm,24:[1,63],35:$Vn,42:65,43:64},{21:[1,69]},{21:[2,11]},{21:[2,12]},{21:[2,13]},{14:[1,70]},{5:$V7,13:71,32:18},o($Vc,[2,21]),o($Vc,[2,22]),o($Vc,[2,23]),o($Vc,[2,24]),o($V4,[2,7]),{5:$V8,36:34,46:26,47:$V9,48:[1,72],49:$Va,52:$Vb},{24:[1,73]},{21:$Vf,56:[1,74],57:[1,75],58:[1,76],59:[1,77]},{24:[2,51]},{23:[1,78]},o($Ve,[2,44],{60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o($Ve,[2,45],{64:$Vs,65:$Vt}),o($Vu,[2,56]),o($Vu,[2,57]),{55:85,66:$Vi,67:$Vj,68:$Vk},o($Vv,[2,61]),o($Vv,[2,62]),o($Vw,[2,39]),{23:$Vx,24:[1,86]},o($Vy,[2,35]),o($Vy,[2,32]),o($Vy,[2,33]),o($Vy,[2,34]),{22:[1,88]},{5:$V8,15:89,36:21,46:26,47:$V9,49:$Va,52:$Vb},{5:$V7,14:[2,17],32:31},o($Ve,[2,41]),{5:$V8,15:90,36:21,46:26,47:$V9,49:$Va,52:$Vb},{22:[1,91]},{22:[1,92]},{22:[1,93]},{22:[1,94]},{22:[1,95]},{5:$Vg,22:$Vh,54:96},{5:$Vg,22:$Vh,54:97},{5:$Vg,22:$Vh,54:98},{5:$Vg,22:$Vh,54:99},{55:100,66:$Vi,67:$Vj,68:$Vk},{55:101,66:$Vi,67:$Vj,68:$Vk},o($Ve,[2,60],{64:$Vs,65:$Vt}),o($Vw,[2,40]),{5:$Vl,22:$Vm,35:$Vn,42:65,43:102},{23:[1,103]},{5:$V8,31:[1,104],36:34,46:26,47:$V9,49:$Va,52:$Vb},{5:$V8,36:34,46:26,47:$V9,49:$Va,51:[1,105],52:$Vb},{24:[2,47]},{24:[2,48]},{24:[2,49]},{24:[2,50]},{23:[1,106]},o($Ve,[2,52],{60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o($Ve,[2,53],{60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o($Ve,[2,54],{60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o($Ve,[2,55],{60:$Vo,61:$Vp,62:$Vq,63:$Vr}),o($Ve,[2,58],{64:$Vs,65:$Vt}),o($Ve,[2,59],{64:$Vs,65:$Vt}),{23:$Vx,24:[2,36]},{22:[1,107]},o($Vd,[2,16]),o($Ve,[2,42]),{22:[1,108]},{23:[1,109]},{24:[1,110]},{22:[1,111]},o($Ve,[2,43]),{23:[1,112]},{22:[1,113]},{24:[1,114]},o($Vc,[2,10])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {

        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class RinfoLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"moduleName":"Rinfo"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\s+)/,
        /^(?:programa\b)/,
        /^(?:areas\b)/,
        /^(?:robots\b)/,
        /^(?:robot\b)/,
        /^(?:variables\b)/,
        /^(?:comenzar\b)/,
        /^(?:fin\b)/,
        /^(?:finprograma\b)/,
        /^(?:si\b)/,
        /^(?:finsi\b)/,
        /^(?:AreaC\b)/,
        /^(?:AreaP\b)/,
        /^(?:AreaPC\b)/,
        /^(?:numero\b)/,
        /^(?:boolean\b)/,
        /^(?:repetir\b)/,
        /^(?:finrepetir\b)/,
        /^(?:proceso\b)/,
        /^(?:E\b)/,
        /^(?:ES\b)/,
        /^(?:[0-9]+)/,
        /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,
        /^(?::=)/,
        /^(?::)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:,)/,
        /^(?:\+)/,
        /^(?:-)/,
        /^(?:$)/,
        /^(?:.)/
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* skip whitespace */
      break;
    case 1:return 4;
      break;
    case 2:return 8;
      break;
    case 3:return 10;
      break;
    case 4:return 29;
      break;
    case 5:return 12;
      break;
    case 6:return 14;
      break;
    case 7:return 31;
      break;
    case 8:return 16;
      break;
    case 9:return 49;
      break;
    case 10:return 51;
      break;
    case 11:return 25;
      break;
    case 12:return 26;
      break;
    case 13:return 27;
      break;
    case 14:return 34;
      break;
    case 15:return 35;
      break;
    case 16:return 47;
      break;
    case 17:return 48;
      break;
    case 18:return 45;
      break;
    case 19:return 38;
      break;
    case 20:return 39;
      break;
    case 21:return 22;
      break;
    case 22:return 5;
      break;
    case 23:return 53;
      break;
    case 24:return 19;
      break;
    case 25:return 21;
      break;
    case 26:return 24;
      break;
    case 27:return 23;
      break;
    case 28:return 60;
      break;
    case 29:return 61;
      break;
    case 30:return 17;
      break;
    case 31:return 'INVALID';
      break;
        }
    }
}


